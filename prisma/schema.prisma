generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(cuid())
  email       String       @unique
  username    String       @unique
  name        String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  connections Connection[]
  notes       Note[]
  password    Password?
  Recipe      Recipe[]
  scans       Scan[]
  sessions    Session[]
  image       UserImage?
  roles       Role[]       @relation("RoleToUser")
}

model Note {
  id        String      @id @default(cuid())
  title     String
  content   String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  ownerId   String
  owner     User        @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  images    NoteImage[]

  @@index([ownerId])
  @@index([ownerId, updatedAt])
}

model NoteImage {
  id          String   @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  noteId      String
  note        Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)

  @@index([noteId])
}

model UserImage {
  id          String   @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Password {
  hash   String
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Permission {
  id          String   @id @default(cuid())
  action      String
  entity      String
  access      String
  description String   @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  roles       Role[]   @relation("PermissionToRole")

  @@unique([action, entity, access])
}

model Role {
  id          String       @id @default(cuid())
  name        String       @unique
  description String       @default("")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  permissions Permission[] @relation("PermissionToRole")
  users       User[]       @relation("RoleToUser")
}

model Verification {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  /// The type of verification, e.g. "email" or "phone"
  type      String
  /// The thing we're trying to verify, e.g. a user's email or phone number
  target    String
  /// The secret key used to generate the otp
  secret    String
  /// The algorithm used to generate the otp
  algorithm String
  /// The number of digits in the otp
  digits    Int
  /// The number of seconds the otp is valid for
  period    Int
  /// The valid characters for the otp
  charSet   String
  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model Connection {
  id           String   @id @default(cuid())
  providerName String
  providerId   String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerName, providerId])
}

model Recipe {
  id           String             @id @default(cuid())
  title        String
  cookingTime  Int
  difficulty   String             @default("EASY")
  instructions String
  calories     Int
  protein      Int
  carbs        Int
  fat          Int
  createdAt    DateTime           @default(now())
  userId       String
  user         User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  image        RecipeImage?
  ingredients  RecipeIngredient[]

  @@index([userId])
}

model RecipeIngredient {
  id       String @id @default(cuid())
  item     String
  amount   String
  recipeId String
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@index([recipeId])
}

model RecipeImage {
  id          String   @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  recipeId    String   @unique
  recipe      Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
}

model Scan {
  id          String      @id @default(cuid())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  ingredients String
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  images      ScanImage[]

  @@index([userId])
}

model ScanImage {
  id          String   @id @default(cuid())
  contentType String
  blob        Bytes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  scanId      String
  scan        Scan     @relation(fields: [scanId], references: [id], onDelete: Cascade)

  @@index([scanId])
}
